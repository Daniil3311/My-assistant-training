import asyncio
from datetime import datetime, timedelta, date
import sys
from os.path import split
from sqlalchemy.future import select
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
    CallbackQueryHandler
)
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from questions_data import QUESTIONS_base, QUESTIONS_Django, knowledge_counter_base
from db.models import Questions, Variants
from sqlalchemy import text

class DataBot:
    pass
class TelegramBot:
    __slots__ = ['engine']
    TOKEN = "8339272645:AAH1suGtNCDkjY5owYT-sMtmF_VsoAEaLMo"
    def __init__(self):

        if sys.platform == "win32":
            asyncio.set_event_loop_policy(asyncio.WindowsProactorEventLoopPolicy())

        self.engine = create_async_engine("postgresql+asyncpg://postgres:123Qwezxcasd@localhost/my_assistant_in_training")

    async def get_db_session(self):
        """–°–æ–∑–¥–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î"""
        return AsyncSession(self.engine)


    async def start(self, u: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        # –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç —Å –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        context.user_data["score"] = 0  # –°—á—ë—Ç—á–∏–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        context.user_data["current_question"] = 0  # –¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å

        await self.send_question(u, context)


    async def send_question(self, u: Update, context: ContextTypes.DEFAULT_TYPE) -> None:

        async with await self.get_db_session() as session:
            # –ü—Ä–∏–º–µ—Ä –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î
            today = datetime.now().date()
            result = await session.execute(
                text( """SELECT * FROM questions 
            WHERE question_data = :today 
            OR question_data IS NULL
            ORDER BY id"""),
                {"today": today}
            )
            res = result.mappings().all()

            print(len(res))
            print(res)
            if len(res)!=0:
                question_num = context.user_data["current_question"]  # –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞
                # res = result.mappings().all()
                res = [dict(row) for row in res]
                print(question_num)
                # print(res[question_num-1])
                # print(res[question_num]['question_data']==datetime.datetime.now().date())
                # print(datetime.now().date())
                variant = res[question_num]['options'].split(',')
                question = res[question_num]
            # if question['question_data']==datetime.now().date():
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
                keyboard = [
                    [InlineKeyboardButton(option, callback_data=f"ans_{i}")]
                    for i, option in enumerate(variant)
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å
                if u.callback_query:
                    await u.callback_query.edit_message_text(
                        f"–í–æ–ø—Ä–æ—Å {question_num}: {question['text']}",
                        reply_markup=reply_markup
                    )
                else:
                    await u.message.reply_text(
                        f"–í–æ–ø—Ä–æ—Å {question_num}: {question['text']}",
                        reply_markup=reply_markup
                    )
            else:
                await u.message.reply_text('–ü–æ–∫–∞ —Ç—ã –≤—ã–ø–æ–ª–Ω—è–µ—à—å —Ç–µ—Å—Ç—ã –±—ã—Å—Ç—Ä–µ–µ —á–µ–º —è –º–æ–≥ –ø–æ–¥—É–º–∞—Ç—å:)!')

    async def handle_answer(self, u: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        query = u.callback_query
        await query.answer()

        async with await self.get_db_session() as session:
            # –ü—Ä–∏–º–µ—Ä –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î
            today = datetime.now().date()

            result = await session.execute(
                text("""SELECT * FROM questions 
                    WHERE question_data = :today 
                    OR question_data IS NULL
                    ORDER BY id"""),
                {"today": today}
            )
            res = result.mappings().all()
            # print(res[1])
            res = [dict(row) for row in res]
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (–∏–∑ callback_data="ans_1" ‚Üí 1)
            chosen_option = int(query.data.split("_")[1])
            question_num = context.user_data["current_question"]
            correct_option = res[question_num]["correct"]
            cor_ans = res[question_num]['correct_answers']

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
            if chosen_option == correct_option:
                context.user_data["score"] += 1
                await query.edit_message_text("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
                if cor_ans >= 1:
                    cor_ans +=1
                else:
                    cor_ans = 1
                from sqlalchemy import update


                # –æ–±–Ω–æ–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ
                stmt = (
                    update(Questions)
                    .where(Questions.id == res[question_num]['id'])
                    .values(question_data=datetime.now().date() + timedelta(days=cor_ans), correct_answers=cor_ans)
                )
                result = await session.execute(stmt)
                # datetime.now().date() + timedelta(days=cor_ans)
                # print(cor_ans, '____>')
                # print(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç—Ä–æ–∫: {result.rowcount}")
                await session.commit()


            else:
                await query.edit_message_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!")

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç
            print(len(res),'==============================')
            context.user_data["current_question"] += 1

            if context.user_data["current_question"] < (len(res)):
                # context.user_data["current_question"] += 1

                await self.send_question(u, context)
            else:
                score = context.user_data["score"]
                total = len(res)
                await query.edit_message_text(
                    f"–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! üéâ\n"
                    f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {score}/{total}"
                )


    def main(self):
        application = ApplicationBuilder().token(self.TOKEN).build()

        application.add_handler(CommandHandler("start", self.start))
        application.add_handler(CallbackQueryHandler(self.handle_answer, pattern="^ans_"))

        application.run_polling()

if __name__ == "__main__":
    t=TelegramBot()
    t.main()